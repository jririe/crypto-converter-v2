generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/crypto_converter_website/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Cryptocurrency {
    id              String   @id @default(cuid())
    coinId          String   @unique
    name            String
    symbol          String
    slug            String   @unique
    image           String?
    currentPrice    Float?
    marketCap       BigInt?
    marketCapRank   Int?
    totalVolume     BigInt?
    high24h         Float?
    low24h          Float?
    priceChange24h  Float?
    priceChangePercentage24h Float?
    marketCapChange24h BigInt?
    marketCapChangePercentage24h Float?
    circulatingSupply BigInt?
    totalSupply     BigInt?
    maxSupply       BigInt?
    ath             Float?
    athChangePercentage Float?
    athDate         DateTime?
    atl             Float?
    atlChangePercentage Float?
    atlDate         DateTime?
    lastUpdated     DateTime @default(now())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    priceHistory    PriceHistory[]
    conversionsFrom Conversion[] @relation("FromCrypto")
    conversionsTo   Conversion[] @relation("ToCrypto")
    watchlistItems  WatchlistItem[]

    @@map("cryptocurrencies")
}

model FiatCurrency {
    id              String   @id @default(cuid())
    code            String   @unique
    name            String
    symbol          String
    flag            String?
    exchangeRate    Float?   // Rate against USD
    lastUpdated     DateTime @default(now())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    conversionsFrom Conversion[] @relation("FromFiat")
    conversionsTo   Conversion[] @relation("ToFiat")

    @@map("fiat_currencies")
}

model PriceHistory {
    id              String   @id @default(cuid())
    cryptoId        String
    timestamp       DateTime
    price           Float
    marketCap       BigInt?
    volume          BigInt?
    createdAt       DateTime @default(now())

    // Relations
    cryptocurrency  Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)

    @@map("price_history")
    @@index([cryptoId, timestamp])
}

model Conversion {
    id              String   @id @default(cuid())
    fromAmount      Float
    toAmount        Float
    fromType        String   // 'crypto' or 'fiat'
    toType          String   // 'crypto' or 'fiat'
    fromCryptoId    String?
    toCryptoId      String?
    fromFiatId      String?
    toFiatId        String?
    exchangeRate    Float
    timestamp       DateTime @default(now())
    ipAddress       String?
    userAgent       String?

    // Relations
    fromCrypto      Cryptocurrency? @relation("FromCrypto", fields: [fromCryptoId], references: [id])
    toCrypto        Cryptocurrency? @relation("ToCrypto", fields: [toCryptoId], references: [id])
    fromFiat        FiatCurrency? @relation("FromFiat", fields: [fromFiatId], references: [id])
    toFiat          FiatCurrency? @relation("ToFiat", fields: [toFiatId], references: [id])

    @@map("conversions")
    @@index([timestamp])
}

model NewsArticle {
    id              String   @id @default(cuid())
    title           String
    description     String?
    content         String?
    url             String   @unique
    imageUrl        String?
    source          String
    author          String?
    publishedAt     DateTime
    category        String?
    tags            String[]
    sentiment       String?  // 'positive', 'negative', 'neutral'
    viewCount       Int      @default(0)
    isActive        Boolean  @default(true)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@map("news_articles")
    @@index([publishedAt])
    @@index([source])
    @@index([category])
}

model User {
    id              String   @id @default(cuid())
    email           String   @unique
    name            String?
    avatar          String?
    preferences     Json?    // User preferences for currencies, news categories, etc.
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    watchlists      Watchlist[]
    alerts          Alert[]

    @@map("users")
}

model Watchlist {
    id              String   @id @default(cuid())
    userId          String
    name            String
    isDefault       Boolean  @default(false)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    items           WatchlistItem[]

    @@map("watchlists")
}

model WatchlistItem {
    id              String   @id @default(cuid())
    watchlistId     String
    cryptoId        String
    addedAt         DateTime @default(now())

    // Relations
    watchlist       Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
    cryptocurrency  Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)

    @@map("watchlist_items")
    @@unique([watchlistId, cryptoId])
}

model Alert {
    id              String   @id @default(cuid())
    userId          String
    cryptoId        String
    alertType       String   // 'price_above', 'price_below', 'percent_change'
    targetValue     Float
    currentValue    Float?
    isActive        Boolean  @default(true)
    isTriggered     Boolean  @default(false)
    triggeredAt     DateTime?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("alerts")
    @@index([userId, isActive])
}

model ExchangeRate {
    id              String   @id @default(cuid())
    baseCurrency    String
    targetCurrency  String
    rate            Float
    source          String   // 'api_source'
    lastUpdated     DateTime @default(now())

    @@map("exchange_rates")
    @@unique([baseCurrency, targetCurrency])
    @@index([lastUpdated])
}

model ApiUsage {
    id              String   @id @default(cuid())
    endpoint        String
    method          String
    ipAddress       String?
    userAgent       String?
    responseTime    Int?     // in milliseconds
    statusCode      Int
    timestamp       DateTime @default(now())

    @@map("api_usage")
    @@index([timestamp])
    @@index([endpoint])
}

// Monetization Models
model AffiliatePartner {
    id              String   @id @default(cuid())
    name            String
    slug            String   @unique
    description     String?
    logoUrl         String?
    websiteUrl      String
    category        String   // 'exchange', 'wallet', 'educational', 'trading', 'defi'
    commission      Float?   // Percentage or fixed amount
    cookieDuration  Int      @default(30) // Days
    isActive        Boolean  @default(true)
    priority        Int      @default(0) // Higher number = higher priority
    regions         String[] // Supported regions
    tags            String[] // For targeting
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    links           AffiliateLink[]
    clicks          AffiliateClick[]
    conversions     AffiliateConversion[]

    @@map("affiliate_partners")
    @@index([category, isActive])
    @@index([priority])
}

model AffiliateLink {
    id              String   @id @default(cuid())
    partnerId       String
    name            String
    description     String?
    targetUrl       String   // The actual affiliate URL
    linkType        String   // 'cta', 'banner', 'text', 'comparison'
    placement       String   // 'header', 'sidebar', 'content', 'footer', 'popup'
    pageContext     String?  // Which pages this link appears on
    utmSource       String?
    utmMedium       String?
    utmCampaign     String?
    utmContent      String?
    isActive        Boolean  @default(true)
    startDate       DateTime?
    endDate         DateTime?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    partner         AffiliatePartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
    clicks          AffiliateClick[]

    @@map("affiliate_links")
    @@index([partnerId, isActive])
    @@index([placement, pageContext])
    @@unique([partnerId, placement, linkType])
}

model AffiliateClick {
    id              String   @id @default(cuid())
    linkId          String
    partnerId       String
    sessionId       String?
    ipAddress       String?
    userAgent       String?
    referrer        String?
    country         String?
    device          String?  // 'desktop', 'mobile', 'tablet'
    timestamp       DateTime @default(now())

    // Relations
    link            AffiliateLink @relation(fields: [linkId], references: [id], onDelete: Cascade)
    partner         AffiliatePartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

    @@map("affiliate_clicks")
    @@index([linkId, timestamp])
    @@index([partnerId, timestamp])
    @@index([sessionId])
}

model AffiliateConversion {
    id              String   @id @default(cuid())
    partnerId       String
    sessionId       String?
    conversionValue Float?   // Revenue generated
    commission      Float?   // Commission earned
    currency        String   @default("USD")
    conversionType  String   // 'signup', 'purchase', 'deposit', 'trade'
    referenceId     String?  // Partner's tracking ID
    ipAddress       String?
    country         String?
    timestamp       DateTime @default(now())
    confirmedAt     DateTime?
    paidAt          DateTime?
    status          String   @default("pending") // 'pending', 'confirmed', 'paid', 'rejected'

    // Relations
    partner         AffiliatePartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)

    @@map("affiliate_conversions")
    @@index([partnerId, status])
    @@index([timestamp])
}

model AdSpace {
    id              String   @id @default(cuid())
    name            String
    slug            String   @unique
    description     String?
    placement       String   // 'header', 'sidebar', 'content', 'footer', 'popup', 'native'
    size            String   // 'small', 'medium', 'large', 'responsive'
    pageTypes       String[] // Which page types this ad appears on
    adType          String   // 'adsense', 'affiliate', 'banner', 'native'
    content         Json?    // Ad content configuration
    isActive        Boolean  @default(true)
    priority        Int      @default(0)
    startDate       DateTime?
    endDate         DateTime?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    impressions     AdImpression[]
    clicks          AdClick[]

    @@map("ad_spaces")
    @@index([placement, isActive])
    @@index([pageTypes])
}

model AdImpression {
    id              String   @id @default(cuid())
    adSpaceId       String
    sessionId       String?
    ipAddress       String?
    userAgent       String?
    country         String?
    device          String?
    pageUrl         String?
    referrer        String?
    timestamp       DateTime @default(now())

    // Relations
    adSpace         AdSpace @relation(fields: [adSpaceId], references: [id], onDelete: Cascade)

    @@map("ad_impressions")
    @@index([adSpaceId, timestamp])
    @@index([sessionId])
}

model AdClick {
    id              String   @id @default(cuid())
    adSpaceId       String
    sessionId       String?
    ipAddress       String?
    userAgent       String?
    country         String?
    device          String?
    pageUrl         String?
    referrer        String?
    timestamp       DateTime @default(now())

    // Relations
    adSpace         AdSpace @relation(fields: [adSpaceId], references: [id], onDelete: Cascade)

    @@map("ad_clicks")
    @@index([adSpaceId, timestamp])
    @@index([sessionId])
}

model Newsletter {
    id              String   @id @default(cuid())
    email           String   @unique
    name            String?
    subscribed      Boolean  @default(true)
    preferences     Json?    // Email preferences, frequency, etc.
    source          String?  // How they subscribed
    ipAddress       String?
    country         String?
    subscribedAt    DateTime @default(now())
    unsubscribedAt  DateTime?
    lastEmailSent   DateTime?

    @@map("newsletter")
    @@index([subscribed])
    @@index([subscribedAt])
}

model ContactSubmission {
    id              String   @id @default(cuid())
    name            String
    email           String
    subject         String?
    message         String
    formType        String   @default("contact") // 'contact', 'partnership', 'support'
    status          String   @default("new") // 'new', 'read', 'replied', 'closed'
    ipAddress       String?
    userAgent       String?
    source          String?  // Which page/form they came from
    priority        String   @default("normal") // 'low', 'normal', 'high', 'urgent'
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@map("contact_submissions")
    @@index([status, priority])
    @@index([createdAt])
}
